{"basic test":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"async (t) => {\n  const join = (...args) => path.join(__dirname, 'fixtures', ...args);\n  const name = 'charlike';\n\n  await fs.remove(join(name));\n\n  await fs.mkdirp(join(name, 'src'));\n\n  const content = 'export default () => 123;\\n';\n  await fs.writeFile(join(name, 'src', 'index.js'), content);\n  await fs.writeJSON(join(name, 'package.json'), pkgJson);\n\n  await update(name, { cwd: join() });\n\n  const newPkg = await fs.readJSON(join(name, 'package.json'));\n\n  t.strictEqual(newPkg.name, name);\n  t.strictEqual(newPkg.license, 'Apache-2.0');\n  t.strictEqual(newPkg.licenseStart, '2016');\n\n  t.ok(newPkg.dependencies.esm);\n  t.ok(newPkg.devDependencies.asia);\n  t.ok(newPkg.devDependencies['@tunnckocore/config']);\n\n  t.strictEqual(newPkg.devDependencies.quuuuuuuuuuuuuxxxx, undefined);\n  t.strictEqual(newPkg.scripts.bar, undefined);\n\n  const srcContent = await fs.readFile(join(name, 'src', 'index.js'), 'utf8');\n  t.strictEqual(srcContent, content);\n\n  t.ok(newPkg.bin);\n  t.ok(newPkg.files);\n\n  t.strictEqual(newPkg.bin, 'cli.js');\n  t.ok(newPkg.files.includes('templates'));\n  t.ok(newPkg.files.includes('cli.js'));\n  await fs.remove(join());\n}","title":"basic test"}}